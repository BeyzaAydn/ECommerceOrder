// <auto-generated />
using System;
using ECommerce.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecommerce.MVC.Migrations
{
    [DbContext(typeof(EcommerceContext))]
    [Migration("20240529130621_Supplier")]
    partial class Supplier
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECommerce.Model.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ECommerce.Model.Entities.AppUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ECommerce.Model.Entities.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CategoryName = "Test Category 1",
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 5, 29, 16, 6, 21, 212, DateTimeKind.Local).AddTicks(9660),
                            CreatedIpAddress = "192.168.1.1",
                            Description = "Test Category 1 Description",
                            IsActive = true,
                            MasterId = new Guid("869f2688-c88e-4f25-b3f2-b961262e5a6e"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 2,
                            CategoryName = "Test Category 2",
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 5, 29, 16, 6, 21, 212, DateTimeKind.Local).AddTicks(9794),
                            CreatedIpAddress = "192.168.1.1",
                            Description = "Test Category 2 Description",
                            IsActive = true,
                            MasterId = new Guid("f823d7e6-c9d1-4db1-8b18-97d44d11e4da"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 3,
                            CategoryName = "Test Category 3",
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 5, 29, 16, 6, 21, 212, DateTimeKind.Local).AddTicks(9838),
                            CreatedIpAddress = "192.168.1.1",
                            Description = "Test Category 3 Description",
                            IsActive = true,
                            MasterId = new Guid("12dbbdea-39fc-46a5-96f8-0bb1b7f40f43"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ECommerce.Model.Entities.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierID")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<short>("UnitsInStock")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ID = 11,
                            CategoryId = 1,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 5, 29, 16, 6, 21, 216, DateTimeKind.Local).AddTicks(3539),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("52904d11-acc3-45a6-ad6d-4e1cc95c29a8"),
                            ProductName = "Chicken",
                            Status = 0,
                            UnitPrice = 2104.10m,
                            UnitsInStock = (short)18,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 12,
                            CategoryId = 1,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 5, 29, 16, 6, 21, 216, DateTimeKind.Local).AddTicks(3906),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("cf0d9499-5c3e-4172-9fc4-dff539c5be10"),
                            ProductName = "Mouse",
                            Status = 0,
                            UnitPrice = 3913.95m,
                            UnitsInStock = (short)89,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 13,
                            CategoryId = 1,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 5, 29, 16, 6, 21, 216, DateTimeKind.Local).AddTicks(4007),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("87ac6908-c5de-4edf-a4e7-ee32eb0e4ea5"),
                            ProductName = "Pizza",
                            Status = 0,
                            UnitPrice = 5002.12m,
                            UnitsInStock = (short)77,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 14,
                            CategoryId = 1,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 5, 29, 16, 6, 21, 216, DateTimeKind.Local).AddTicks(4077),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("f5437bfd-51c1-47ea-8c88-313fa1ef3c56"),
                            ProductName = "Pants",
                            Status = 0,
                            UnitPrice = 9362.32m,
                            UnitsInStock = (short)66,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 15,
                            CategoryId = 1,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 5, 29, 16, 6, 21, 216, DateTimeKind.Local).AddTicks(4141),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("cf17e1a3-8968-48d5-8e64-32c135143e7f"),
                            ProductName = "Mouse",
                            Status = 0,
                            UnitPrice = 5836.39m,
                            UnitsInStock = (short)1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 16,
                            CategoryId = 1,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 5, 29, 16, 6, 21, 216, DateTimeKind.Local).AddTicks(4262),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("526fc88f-228d-44a2-ba59-a1e04a9f4c89"),
                            ProductName = "Hat",
                            Status = 0,
                            UnitPrice = 8471.33m,
                            UnitsInStock = (short)6,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 17,
                            CategoryId = 1,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 5, 29, 16, 6, 21, 216, DateTimeKind.Local).AddTicks(4335),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("5747927b-5689-4d8f-b4e5-ce55270161e4"),
                            ProductName = "Table",
                            Status = 0,
                            UnitPrice = 4401.11m,
                            UnitsInStock = (short)83,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 18,
                            CategoryId = 1,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 5, 29, 16, 6, 21, 216, DateTimeKind.Local).AddTicks(4400),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("b515740f-defc-4fc7-aa2d-9fb3b3b7764c"),
                            ProductName = "Keyboard",
                            Status = 0,
                            UnitPrice = 858.54m,
                            UnitsInStock = (short)12,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 19,
                            CategoryId = 1,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 5, 29, 16, 6, 21, 216, DateTimeKind.Local).AddTicks(4463),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("6ae96786-85c8-4f8b-92dd-7dd5960301bf"),
                            ProductName = "Keyboard",
                            Status = 0,
                            UnitPrice = 3729.67m,
                            UnitsInStock = (short)25,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 20,
                            CategoryId = 1,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 5, 29, 16, 6, 21, 216, DateTimeKind.Local).AddTicks(4527),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("32d7048d-4838-4f60-aed8-bbd583376634"),
                            ProductName = "Hat",
                            Status = 0,
                            UnitPrice = 3849.77m,
                            UnitsInStock = (short)49,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 21,
                            CategoryId = 2,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 5, 29, 16, 6, 21, 216, DateTimeKind.Local).AddTicks(4596),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("b53f4404-801e-4470-a858-b2f58942066a"),
                            ProductName = "Fish",
                            Status = 0,
                            UnitPrice = 7203.78m,
                            UnitsInStock = (short)79,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 22,
                            CategoryId = 2,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 5, 29, 16, 6, 21, 216, DateTimeKind.Local).AddTicks(4706),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("dd945c2a-5958-4dfe-ad3f-b73ffc42f3cb"),
                            ProductName = "Tuna",
                            Status = 0,
                            UnitPrice = 806.98m,
                            UnitsInStock = (short)61,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 23,
                            CategoryId = 2,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 5, 29, 16, 6, 21, 216, DateTimeKind.Local).AddTicks(4769),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("f737b3ed-466f-4613-9c67-c5072102d8dd"),
                            ProductName = "Chair",
                            Status = 0,
                            UnitPrice = 5157.02m,
                            UnitsInStock = (short)78,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 24,
                            CategoryId = 2,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 5, 29, 16, 6, 21, 216, DateTimeKind.Local).AddTicks(4831),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("0160569c-b103-403b-807d-8d6f31cd3caf"),
                            ProductName = "Bike",
                            Status = 0,
                            UnitPrice = 8055.49m,
                            UnitsInStock = (short)52,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 25,
                            CategoryId = 2,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 5, 29, 16, 6, 21, 216, DateTimeKind.Local).AddTicks(4892),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("daba1fa2-23c4-4c37-99b4-9e7cd2609c17"),
                            ProductName = "Chicken",
                            Status = 0,
                            UnitPrice = 2723.05m,
                            UnitsInStock = (short)32,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 26,
                            CategoryId = 2,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 5, 29, 16, 6, 21, 216, DateTimeKind.Local).AddTicks(4952),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("a38b48b9-bcdb-48e5-be3f-8fab19368450"),
                            ProductName = "Table",
                            Status = 0,
                            UnitPrice = 5389.41m,
                            UnitsInStock = (short)39,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 27,
                            CategoryId = 2,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 5, 29, 16, 6, 21, 216, DateTimeKind.Local).AddTicks(5013),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("7600c257-4386-4088-96b4-b4c2047e009c"),
                            ProductName = "Shoes",
                            Status = 0,
                            UnitPrice = 8824.79m,
                            UnitsInStock = (short)70,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 28,
                            CategoryId = 2,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 5, 29, 16, 6, 21, 216, DateTimeKind.Local).AddTicks(5077),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("d5099c8b-7d05-4f05-a263-a0f5a088c145"),
                            ProductName = "Table",
                            Status = 0,
                            UnitPrice = 2995.34m,
                            UnitsInStock = (short)80,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 29,
                            CategoryId = 2,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 5, 29, 16, 6, 21, 216, DateTimeKind.Local).AddTicks(5145),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("c651a1b3-4525-43c0-8d87-2370032abdfb"),
                            ProductName = "Computer",
                            Status = 0,
                            UnitPrice = 3933.13m,
                            UnitsInStock = (short)85,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 30,
                            CategoryId = 2,
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 5, 29, 16, 6, 21, 216, DateTimeKind.Local).AddTicks(5251),
                            CreatedIpAddress = "192.168.1.1",
                            ImagePath = "http://lorempixel.com/640/480/fashion",
                            IsActive = true,
                            MasterId = new Guid("4824c118-29ec-44f5-933c-debb6438954c"),
                            ProductName = "Shoes",
                            Status = 0,
                            UnitPrice = 1862.49m,
                            UnitsInStock = (short)2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ECommerce.Model.Entities.Supplier", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Address = "Test Supplier Adress1",
                            CompanyName = "Test Supplier1",
                            ContactName = "Test Contact1",
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 5, 29, 16, 6, 21, 216, DateTimeKind.Local).AddTicks(7630),
                            CreatedIpAddress = "192.168.1.1",
                            IsActive = true,
                            MasterId = new Guid("92c5d904-e7b8-43c6-9d9a-a4d718809563"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 2,
                            Address = "Test Supplier Adress2",
                            CompanyName = "Test Supplier2",
                            ContactName = "Test Contact2",
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 5, 29, 16, 6, 21, 216, DateTimeKind.Local).AddTicks(7687),
                            CreatedIpAddress = "192.168.1.1",
                            IsActive = true,
                            MasterId = new Guid("7136b69a-0160-412e-8bd8-76a90ed554ab"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 3,
                            Address = "TestSupplierAdress3",
                            CompanyName = "TestSupplier3",
                            ContactName = "Test Contact3",
                            CreatedComputerName = "KDK-101-PC09-YZ",
                            CreatedDate = new DateTime(2024, 5, 29, 16, 6, 21, 216, DateTimeKind.Local).AddTicks(7721),
                            CreatedIpAddress = "192.168.1.1",
                            IsActive = true,
                            MasterId = new Guid("992b8665-87a9-4239-9b9d-6a3870c11056"),
                            Status = 0,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ECommerce.Model.Entities.Product", b =>
                {
                    b.HasOne("ECommerce.Model.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Model.Entities.Supplier", null)
                        .WithMany("Products")
                        .HasForeignKey("SupplierID");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ECommerce.Model.Entities.AppUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ECommerce.Model.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ECommerce.Model.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ECommerce.Model.Entities.AppUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Model.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ECommerce.Model.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerce.Model.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ECommerce.Model.Entities.Supplier", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
